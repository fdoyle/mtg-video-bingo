{"version":3,"sources":["component/AspectRatio/AspectRatio.tsx","component/Board/BoardTile.tsx","component/Board/Board.tsx","component/Picker/SetPicker.tsx","data.ts","Bingo.tsx","serviceWorker.ts","index.tsx"],"names":["AspectRatio","paddingString","paddingTop","this","props","aspectRatio","className","style","children","React","Component","BoardTile","onClick","event","console","log","index","onToggle","active","content","Board","useState","currentBoardState","setBoardState","slug","useParams","newState","updatedBoardState","boardTiles","set","undefined","Object","assign","sets","i","text","unsafeText","shift","hasOwnProperty","push","key","x","y","Math","floor","SetPicker","map","to","setText","Bingo","yaml","JSON","stringify","setTitles","keys","basename","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kXASaA,G,YAAb,iLAEQ,IAAIC,EAAgB,CAChBC,WAAYC,KAAKC,MAAMC,aAG3B,OAAO,yBAAKC,UAAU,QAAQC,MAAON,GACjC,yBAAKK,UAAU,SACVH,KAAKC,MAAMI,eAR5B,GAAiCC,IAAMC,YCS1BC,EAAb,YACI,WAAYP,GAAa,IAAD,8BACpB,4CAAMA,KAeVQ,QAAU,SAACC,GACPC,QAAQC,IAAI,YAAc,EAAKX,MAAMY,OACrC,EAAKZ,MAAMa,SAAS,EAAKb,MAAMY,QAlBX,EAD5B,sEAMQ,OAAO,yBAAKV,UAAS,wBAAmBH,KAAKC,MAAMc,OAAS,UAAY,aAAeN,QAAST,KAAKS,SACjG,kBAAC,EAAD,CAAaP,YAAY,QACrB,yBAAKC,UAAU,0BACX,uBAAGA,UAAU,iBACRH,KAAKC,MAAMe,gBAVpC,GAA+BV,IAAMC,W,OCN9B,SAASU,EAAMhB,GAClB,IADiC,EAKUiB,mBADrB,IAJW,mBAK1BC,EAL0B,KAKPC,EALO,KAM3BC,EAASC,cAATD,KACNV,QAAQC,IAAIS,GAoBZ,IAlBA,IAAIP,EAAW,SAACD,GACZ,IAMIU,IALAV,KAASM,GAAiD,GAA5BA,EAAkBN,IAMpDF,QAAQC,IAAR,gBAAqBC,EAArB,sBAAwCU,IACxC,IAAIC,EAAiB,YAAOL,GAC5BK,EAAkBX,GAASU,EAC3BH,EAAcI,IAGdC,EAAa,GAEbC,OAAcC,GAARN,EAAoBA,EAAO,YACjCL,EAAUY,OAAOC,OAAO,GAAI5B,EAAM6B,KAAKJ,IAClCK,EAAI,EAAQ,IAALA,EAASA,IAAK,CAC1B,IAAIC,EAAe,GACnB,GAAS,IAALD,EACAC,EAAO,iBACJ,CACH,IAAIC,EAAajB,EAAQkB,aACPP,GAAdM,IACAD,EAAOC,GAGf,IAAIlB,EAASI,EAAkBgB,eAAeJ,IAA8B,GAAxBZ,EAAkBY,GACtEN,EAAWW,KAAK,kBAAC,EAAD,CACZC,IAAKN,EACLO,EAAGP,EAtCW,EAuCdQ,EAAGC,KAAKC,MAAMV,EAvCA,GAwCdlB,MAAOkB,EACPhB,OAAQA,EACRD,SAAUA,EACVE,QAASgB,KAEjB,OAAO,yBAAK7B,UAAU,SAASsB,G,YCnDtBiB,G,MAAY,SAACzC,GACtB,OAAO,wBAAIE,UAAU,WAChBF,EAAM6B,KAAKa,KAAI,SAACjB,GACb,OAAO,kBAAC,IAAD,CAAMkB,GAAE,eAAUlB,EAAV,MACX,wBAAIvB,UAAU,WACTuB,U,QCTRmB,EAAe,s1CCwBbC,EAlBS,WACtBnC,QAAQC,IAAIiC,GACZ,IAAIf,EAAOiB,OAAUF,GACrBlC,QAAQC,IAAIoC,KAAKC,UAAUnB,IAC3B,IAAIoB,EAAYtB,OAAOuB,KAAKrB,GAE5B,OACE,yBAAK3B,UAAU,OACb,kBAAC,IAAD,CAAQiD,SAAS,oBACf,kBAAC,EAAD,CAAWtB,KAAMoB,IACjB,qCACA,kBAAC,IAAD,CAAOG,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,kBAAC,EAAD,CAAOzB,KAAMA,OACjD,kBAAC,IAAD,CAAOuB,KAAK,cAAcE,OAAQ,kBAAM,kBAAC,EAAD,CAAOzB,KAAMA,UCVzC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAAWO,SAASC,eAAe,SDmI7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b0aa5007.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./AspectRatio.css\"\n\nexport type IProps = {\n    aspectRatio: string\n}\n\n\n\nexport class AspectRatio extends React.Component<IProps> {\n    render() {\n        let paddingString = {\n            paddingTop: this.props.aspectRatio\n        }\n\n        return <div className=\"outer\" style={paddingString}>\n            <div className=\"inner\">\n                {this.props.children}\n            </div>\n        </div >\n    }\n}","import React from \"react\";\nimport './Board.css'\nimport { AspectRatio } from \"../AspectRatio/AspectRatio\";\nimport { Textfit } from 'react-textfit';\n\nexport type IProps = {\n    index: number;\n    x: number,\n    y: number,\n    active: boolean,\n    content: string,\n    onToggle: (index: number) => void\n}\n\nexport type IState = {\n\n}\n\nexport class BoardTile extends React.Component<IProps, IState>{\n    constructor(props: any) {\n        super(props)\n    }\n\n    render() {\n        return <div className={`boardTile \" + ${this.props.active ? \"checked\" : \"unchecked\"}`} onClick={this.onClick}>\n            <AspectRatio aspectRatio=\"100%\">\n                <div className=\"boardTileTextContainer\">\n                    <p className=\"boardTileText\" >\n                        {this.props.content}\n                    </p>\n                </div>\n            </AspectRatio>\n        </div>\n    }\n\n    onClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n        console.log(\"toggling \" + this.props.index)\n        this.props.onToggle(this.props.index);\n    }\n}\n\n","import React from \"react\";\nimport { BoardTile } from \"./BoardTile\";\nimport './Board.css'\nimport { number } from \"prop-types\";\nimport { useParams } from \"react-router\";\nimport { useState } from 'react';\n\nexport type IProps = {\n    sets: any;\n    match?: any\n}\n\nexport function Board(props: IProps) {\n    let rows: number = 5;\n    let columns: number = 5;\n\n    let init: boolean[] = []\n    const [currentBoardState, setBoardState] = useState(init)\n    let { slug } = useParams();\n    console.log(slug)\n\n    let onToggle = (index: number) => {\n        let oldState = null\n        if (index in currentBoardState && currentBoardState[index] == true) {\n            oldState = true;\n        } else {\n            oldState = false;\n        }\n        let newState = !oldState\n        console.log(`index ${index} new state ${newState}`)\n        let updatedBoardState = [...currentBoardState]\n        updatedBoardState[index] = newState;\n        setBoardState(updatedBoardState)\n    }\n\n    let boardTiles = []\n\n    let set = slug != undefined ? slug : \"Core Rudy\"\n    let content = Object.assign([], props.sets[set]);\n    for (let i = 0; i != 25; i++) {\n        let text: string = \"\";\n        if (i == 12) {\n            text = \"Free Space\"\n        } else {\n            let unsafeText = content.shift()\n            if (unsafeText != undefined) {\n                text = unsafeText;\n            }\n        }\n        let active = currentBoardState.hasOwnProperty(i) && currentBoardState[i] == true;\n        boardTiles.push(<BoardTile\n            key={i}\n            x={i % columns}\n            y={Math.floor(i / columns)}\n            index={i}\n            active={active}\n            onToggle={onToggle}\n            content={text} />)\n    }\n    return <div className=\"board\">{boardTiles}</div>\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './SetPicker.css'\n\nexport type IProps = {\n    sets: string[]\n}\n\nexport const SetPicker = (props: IProps) => {\n    return <ul className=\"setList\">\n        {props.sets.map((set:string) => {\n            return <Link to={`/set/${set}/`}>\n                <li className=\"setItem\">\n                    {set}\n                </li>\n            </Link>\n        })}\n    </ul>\n}","//this is all YAML\n//Ideally, this would just be a separate yaml document, \n//but this is easier than fetching them separately\n\nexport const setText: string = `\nUltimate Masters: \n  - The Flippin Lighthouse\n  - Old Man Rudy\n  - Life from the Loom\n  - Slap me in the testicle and take my sister on a date\n  - Flagstones of a Dollar\n  - Snappy\n  - Lavaclaw Reach Around\n  - Rudy's Brother\n  - Demonic Rudy\n  - 10 minute video\n  - Rudy's Ex\n  - Through the Rudy\n  - Nobody Cares About Your Shoal\n  - Karn\n  - 5 to 10 Dollar Rares\n  - Just cut off my arm and cover it in taco bell sauce and mail it to my ex girlfriend\n  - Lili\n  - Two ____ One Rudy\n  - Just getting pounded in the face\n  - Noble Hierarch\n  - Getting Trolled\n  - Seizing My Day\n  - Turn on the green screen and delete the video!\n  - Inaccurate Price Estimates\n\nCore Rudy:\n  - moogic the goothering\n  - \"Creepy Rudy\"\n  - ___ for/of the nice two dollar bill\n  - Holy Smokes!\n  - Delete the video!\n  - Gettin' Hosed\n  - Into the Thunder dome\n  - Agh, I thought we had a ______\n  - Just getting pounded in the face\n  - Rudy drops the pack\n  - Boom!\n  - Inaccurate Price Estimates\n  - Rudy says the name wrong\n  - Rudy's Ex\n  - _____? Really? agh...\n  - The camera throws a tantrum\n  - Wow, what a box!\n  - \"Shameless Rudy Plug\"\n  - Rudy makes fun of the patron\n  - (Wild) Rudy Being Creepy  \n  - (Wild) Rudy Being Creepy\n  - (Wild) Rudy Being Creepy\n  - (Wild) Rudy Being Creepy\n  - (Wild) Rudy Being Creepy\n`;\n\nconst unfinishedCards: string = `\n\nvintage-rudy: \n  - They just don't make art like that anymore\n  - comment about the card pack packaging\n  - comment about booster box packaging\n  - Rudy uses his special knife\n  - Duplicate rares? These old sets...\n\n\n`\n\nexport const setImages: string = `\nultimate masters: \n    https://magic.wizards.com/sites/mtg/files/A5h5EsQO4s.jpg\n\n\n\n\n`","import React from 'react';\nimport './Bingo.css';\nimport { Board } from './component/Board/Board';\nimport { SetPicker } from './component/Picker/SetPicker'\nimport * as yaml from 'js-yaml';\nimport { setText, setImages } from './data'\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\"\n//we're using HashRouter because apparently it works better with github pages\n\n\nconst Bingo: React.FC = () => {\n  console.log(setText)\n  let sets = yaml.load(setText);\n  console.log(JSON.stringify(sets))\n  let setTitles = Object.keys(sets)\n\n  return (\n    <div className=\"App\">\n      <Router basename=\"/mtg-video-bingo\">\n        <SetPicker sets={setTitles} />\n        <h1>Bingo</h1>\n        <Route path=\"/\" exact render={() => <Board sets={sets} />} />\n        <Route path=\"/set/:slug/\" render={() => <Board sets={sets} />} />\n      </Router>\n    </div>\n  );\n}\n\nexport default Bingo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Bingo from './Bingo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Bingo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}